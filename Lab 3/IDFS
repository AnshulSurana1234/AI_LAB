graph={
    'A' :['B','C'],
     'B' :['D','E'],
      'C' :['G'],
       'D' :[ ],
       'E':['F'],
       'G' :[ ],
       'F' :[ ]
}
path=list()

def DFS(currentNode,des,graph,maxDepth,currList):
    print("Checking for destination",currentNode)
    currList.append(currentNode)
    if currentNode==des:
        return True;
    if maxDepth<=0:
        path.append(currList)
        return False
    for node in graph[currentNode]:
        if DFS(node,des,graph,maxDepth-1,currList):
            return True
        else:
            currList.pop()
    return False
    
def iterativeDFS(currentNode,dest,graph,maxDepth):
    for i in range(maxDepth):
        currList=list()
        if DFS(currentNode,dest,graph,i,currList):
            return True
    return False
    if not iterativeDFS('A','E',graph,4):
    print("PATH IS NOT AVAILABLE")
else:
    print("A PATH EXISTS")
    print(path.pop())
